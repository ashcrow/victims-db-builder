import unittest
import vulnerability
import re

class TestVulnerability(unittest.TestCase):

    def test_print_flaw(self):
        vul = vulnerability.Vulnerability('test/6504.yaml')
        vul.print_flaw()

    def test_regex(self):
        vuln = vulnerability.Vulnerability('test/2080.yaml')
        searchString = '''
<td><a href="jetty-http/9.2.0.v20140526" class="vbtn release">9.2.0.v20140526
</a></td><td><div><a href="jetty-http/9.2.0.v20140526/usages">6</a>
<span class="rb" style="width:7px;"></span></div></td><td>release</td><td>
(May, 2014)</td></tr><tr><td><a href="jetty-http/9.2.0.M1"
class="vbtn milestone">9.2.0.M1</a></td><td><div><a href="jetty-http/9.2.0.M1/
usages">6</a><span class="rb" style="width:7px;"></span></div></td>
<td>milestone</td><td> (May, 2014)</td></tr><tr><td>
<a href="jetty-http/9.2.0.M0" class="vbtn milestone">9.2.0.M0</a></td>
<td><div><a href="jetty-http/9.2.0.M0/usages">6</a>
<span class="rb" style="width:7px;"></span></div></td>'''
        matchResult = vuln.regex_search('9.2.0', searchString)
        self.assertTrue('9.2.0.v20140526' in matchResult)
        self.assertTrue('9.2.0.M1' in matchResult)
        self.assertTrue('9.2.0.M0' in matchResult)

    def test_regex_with_appendix(self):
        vuln = vulnerability.Vulnerability('test/3192.yaml')
        searchString = open('test/spring-web.html').read()
        matchResult = vuln.regex_search('4.2.0', searchString)
        (ref) = matchResult.pop()
        #print "ref: %s" % ref
        #self.assertIsNotNone(appendix)
        self.assertEquals('4.2.0.RELEASE', ref)

    def test_versions_up_only(self):
        vuln = vulnerability.Vulnerability('test/3192.yaml')
        library = vuln.libraries.pop()
        self.assertEquals(['<=3.2.13,3.2', '<=4.1.6,4'], library.versionRanges)

    def test_versions_union(self):
        vuln = vulnerability.Vulnerability('test/2080.yaml')
        self.assertEquals(['<=9.2.8,9.2.3'], vuln.verRanges)

if __name__ == '__main__':
    unittest.main()
