import unittest
import vulnerability
import re

class TestVulnerability(unittest.TestCase):

    def test_regex(self):
        vuln = vulnerability.Vulnerability('2080.yaml')
        #searchString = open('test/jetty-http.html').read()
        searchString = '''
<td><a href="jetty-http/9.2.0.v20140526" class="vbtn release">9.2.0.v20140526
</a></td><td><div><a href="jetty-http/9.2.0.v20140526/usages">6</a>
<span class="rb" style="width:7px;"></span></div></td><td>release</td><td>
(May, 2014)</td></tr><tr><td><a href="jetty-http/9.2.0.M1"
class="vbtn milestone">9.2.0.M1</a></td><td><div><a href="jetty-http/9.2.0.M1/
usages">6</a><span class="rb" style="width:7px;"></span></div></td>
<td>milestone</td><td> (May, 2014)</td></tr><tr><td>
<a href="jetty-http/9.2.0.M0" class="vbtn milestone">9.2.0.M0</a></td>
<td><div><a href="jetty-http/9.2.0.M0/usages">6</a>
<span class="rb" style="width:7px;"></span></div></td>'''
        matchResult = vuln.regex_search('9.2.0', searchString)
        for match in matchResult:
            print match[0]
        print "groups: %s" % len(matchResult)

    def test_regex_with_appendix(self):
        vuln = vulnerability.Vulnerability('3192.yaml')
        searchString = open('test/spring-web.html').read()
        matchResult = vuln.regex_search('4.2.0', searchString)
        (ref, appendix) = matchResult.pop()
        print "ref: %s, appendix %s" % (ref, appendix)
        self.assertIsNotNone(appendix)
        self.assertEquals('.RELEASE', appendix)



if __name__ == '__main__':
    unittest.main()
