import yaml
import sys
import library
import logging

class Vulnerability:

    ## For loading in Yaml info
    def __init__(self,document):
        self.logger = logging.getLogger(__name__)
        try:
            data = yaml.load(file(document))
            self.cve = data['cve']
            self.title = data['title']
            if hasattr(data, 'description'):
                self.description = data['description']
            if hasattr(data, 'cvss_v2'):
                self.cvss_v2 = data['cvss_v2']
            if hasattr(data, 'references'):
                self.references = data['references']
            self.libraries = list()
            self.add_libraries(data['affected'])
        except IOError, e:
            self.logger.error("Error loading YAML file: ", e)
            sys.exit(1)

    #TODO the types of Libraries we add will differ for Python and Ruby
    def add_libraries(self, affectedLibraries):
        for affectedLibrary in affectedLibraries:
            version = affectedLibrary['version']
            artifactId = affectedLibrary['artifactId']
            groupId = affectedLibrary['groupId']
            try:
                self.libraries.append(library.JavaLibrary(
                    version, groupId, artifactId))
            except ValueError:
                self.logger.error("ValueError trying to add library: %s/%s/%s", groupId,
                    artifactId, version)

    ## Prints out basics
    def print_flaw(self):
        print "CVE= " + self.cve
        for library in self.libraries:
            #TODO check for library type eg. JavaLibrary
            print "affected versions: %s" % library.versionRanges
            print "groupId: %s" % library.groupId
            print "artifactId: %s" % library.artifactId
        rangeCount = 1
