import yaml
import sys
import library

#COMMON_FIELDS = {
#    'cve': FieldValidator([is_string, is_cve]),
#    'title': FieldValidator([is_string]),
#    'description': FieldValidator([is_text], False),
#    'cvss_v2': FieldValidator([is_cvss_v2], False),
#    'references': FieldValidator([is_references], False),
#    'affected': FieldValidator([is_affected])
#}

#LANGUAGE_FIELDS = {
#    'python': {
#        'name': FieldValidator([is_string]),
#        'version': FieldValidator([is_version]),
#        'fixedin': FieldValidator([is_version], False),
#        'unaffected': FieldValidator([is_version], False),
#    },
#    'java': {
#        'groupId': FieldValidator([is_string]),
#        'artifactId': FieldValidator([is_string]),
#        'version': FieldValidator([is_version]),
#        'fixedin': FieldValidator([is_version], False),
#        'unaffected': FieldValidator([is_version], False),
#    }
#}

#VERSION_REGEX = regex_compile(
#    r'^(?P<condition>[><=]=)'
#    r'(?P<version>[^, ]+)'
#    r'(?:,(?P<series>[^, ]+)){0,1}$'
#)

##############################################################
## Vulnerability class
## Used for both parsing yaml file and building individual jar files
##############################################################

class Vulnerability:

    ## For loading in Yaml info
    def __init__(self,document):
        try:
            data = yaml.load(file(document))
            self.cve = data['cve']
            self.title = data['title']
            if hasattr(data, 'description'):
                self.description = data['description']
            if hasattr(data, 'cvss_v2'):
                self.cvss_v2 = data['cvss_v2']
            if hasattr(data, 'references'):
                self.references = data['references']
            self.libraries = list()
            self.add_libraries(data['affected'])
        except IOError, e:
            print "Returns :", e
            sys.exit()

    #TODO the types of Libraries we add will differ for Python and Ruby
    def add_libraries(self, affectedLibraries):
        for affectedLibrary in affectedLibraries:
            version = affectedLibrary['version']
            artifactId = affectedLibrary['artifactId']
            groupId = affectedLibrary['groupId']
            try:
                self.libraries.append(library.JavaLibrary(
                    version, groupId, artifactId))
            except ValueError:
                print "Error trying to add library: %s/%s/%s" % (groupId,
                    artifactId, version)

    ## Prints out basics
    def print_flaw(self):
        print "CVE= " + self.cve
        for library in self.libraries:
            #TODO check for library type eg. JavaLibrary
            print "affected versions: %s" % library.versionRanges
            print "groupId: %s" % library.groupId
            print "artifactId: %s" % library.artifactId
        rangeCount = 1
